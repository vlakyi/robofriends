{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundary","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.28ede841.chunk.js","sourcesContent":["import React from 'react';\r\n//const Card = (props) => {\r\n//const {name, email, id} = props;    // using destructurs from ES6. But instead of this we can use this one below\r\nconst Card = ({name, email, id}) => {       // we are using destructure insight parameters bracket, we are receiving props and making destructure insight brackets\r\n    return(     // we can return only 1 element in this case we are returning one div and adding elements insight this div\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>  // in src ?200x200 means that we need picture 200px width and 200px height\r\n    );\r\n}       \r\nexport default Card;\r\n// we have to import rect to use jsx syntax\r\n// All js expresions like properties insight jsx has to use {} brackets","import React, {Fragment} from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    return (        // because everething insight there is java script we can put insight function and it should work\r\n        <Fragment>  \r\n      {\r\n          robots.map((user, i) => {\r\n            return (\r\n            <Card                            // can be in 1 line, we splitted this just to make it look prettier\r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n            />  \r\n            // we have to add key elemeent to make React DOM work correctly, so if we would like to delete one element it would know which one we would like to delete\r\n            );\r\n        })\r\n      };\r\n     </Fragment>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input\r\n            aria-label=\"Search Robots\"\r\n            className = \"pa3 ba b--green bg-lightest-blue\"\r\n            type ='search'\r\n            placeholder='search robots'\r\n            onChange = {searchChange}   // onChange is event\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style = {{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooooops. This is not good</h1>\r\n        }\r\n        return this.props.children // render children\r\n    }\r\n}\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n// State >> props\r\n// state(changable props) is object whith is describing what kind of action user is doing\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {       // React's method so we haven't to create an arrow function. this method is calling imidiatelly when component is mounted \r\n        this.props.onRequestRobots();\r\n    }\r\n    render() {  // render is running every time state is changing\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {         // cleaner\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());    // cleaner\r\n        })\r\n        return isPending ?                           //cleaner, because by default will be equal zero\r\n            <h1 className=\"tc\">Loading...</h1>:\r\n        (\r\n        <div className = \"tc\">\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            <SearchBox searchChange = {onSearchChange}/>  \r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n}\r\n     from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text                     // ładunek, to co dostajemy\r\n})\r\n\r\n// With a plain basic Redux store, you can only do simple synchronous updates by dispatching an action. Middleware extend the store's abilities,\r\n//  and let you write async logic that interacts with the store. Thunk is a function, which wraps an expression to delay this evalution.\r\n//  like this let foo = () => 1 + 2;  to get async call, We are using it below:\r\n\r\n// To handle async calls Thunk is looking for actions that returning functions like below. It's called higher order function, read more about this\r\nexport const requestRobots = () => (dispatch) => {            // dispatch action(akcja przesyłkowa, na przykład fetch)\r\n    dispatch ({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users') // method for making request\r\n        .then(response=> response.json())                    // converting response to json file\r\n        .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))  \r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n            // return { ...state, searchField: action.payload} // the same as above, but using destructuring\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';   //react Fragment is a new feature form React 16.2+ it helps to have more semantic HTML code like in function below, so we don't have to use milions of divs any more, but if we want to use className tag we have to use div or sth like that\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';      // redux\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';              // redux store function import, applyMiddleware to apply Middleware in our app\r\nimport {createLogger} from 'redux-logger';  // redux middleware\r\nimport thunkMiddleware from 'redux-thunk';  // middleware for async actions\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons'; \r\n// import {robots} from './robots';        // we have to use {} syntax because we aren't export default module, but collection of modules, \r\n                                        // so if we want to ad more than 1 module use {module1, module2} syntax \r\nconst logger = createLogger();          // middleware for easier debbuging redux (logs in developer mode)\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n            <Provider store = {store}>\r\n                <App />\r\n            </Provider>, document.getElementById('root'));\r\n// to render more than 1 module we hav to use div tag for example and add all components insight it\r\n\r\n// If you want your app to work offline and load faster, you can change unregister() to register() below. Note this comes with some pitfalls. Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}